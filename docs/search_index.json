[["index.html", "How to Use Urban Smart Sensor Chapter 1 Preface 1.1 About this document 1.2 Scope of this document", " How to Use Urban Smart Sensor Juhyeon Park 2022-04-01 Chapter 1 Preface 1.1 About this document This document provides useful information for individuals who are interested in urban sensing with commercially available lower-cost sensors. Many governments have launched a sensing project that involves a series of sensors placed around the city for capturing a massive amount of data including pedestrian, vehicle, temperature, and air quality. Here are some examples: the Array of Things (AoT) in Chicago, USA and S-DoT in Seoul, Korea. With the rapid development of the Internet-of-Things (IoTs), the do-it-yourself (DIY) technologies attempt to democratize these monitoring practices that may be the domain of expert scientists. Our target audience are individuals who want to learn how to build the urban DIY sensors. 1.2 Scope of this document This document demonstrates 1) how to build a smart sensor that detects pedestrians outdoors through WiFi sensing and 2) analyze the created data to produce meaningful insights. This includes: Getting WiFi data preprocessing WiFi data analysis 1.2.1 Why WiFi sensing? WiFi sensing technologies is one of them as a non-invasive tool for monitoring pedestrians outdoor via sensors that detect WiFi packets sent regularly by access points (APs) and WiFi-enabled devices. Most pedestrians today carry smart devices equipped with WiFi network interfaces, and each WiFi packet includes unique 48-bit addresses, known as Media Access Control (MAC) addresses, enabling a device to be tracked by multiple WiFi sensors. Many recent papers used the sensing technologies to identify pedestrian movement and behaviors123. Concept of WiFi sensing technologies Duives, D. C., van Oijen, T., &amp; Hoogendoorn, S. P. (2020). Enhancing Crowd Monitoring System Functionality through Data Fusion: Estimating Flow Rate from Wi-Fi Traces and Automated Counting System Data. Sensors (Basel), 20(21). https://doi.org/10.3390/s20216032 Soundararaj, B., Cheshire, J., &amp; Longley, P. (2019). Estimating real-time high-street footfall from Wi-Fi probe requests. International Journal of Geographical Information Science, 34(2), 325-343,. https://doi.org/10.1080/13658816.2019.1587616 Zhou, Y., Lau, B. P. L., Koh, Z., Yuen, C., &amp; Ng, B. K. K. (2020). Understanding Crowd Behaviors in a Social Event by Passive WiFi Sensing and Data Mining. IEEE internet of things journal, 1-1,. https://doi.org/10.1109/jiot.2020.2972062 "],["introduction.html", "Chapter 2 Introduction 2.1 Our sensor 2.2 Prerequisite", " Chapter 2 Introduction 2.1 Our sensor The sensor is a device that is designed to measure pedestrian behaviors. The following functions are available: Detecting WiFi packets Recording 2.2 Prerequisite Hardware Item Function Requirement Laptop and LAN cable To access and control your sensor Raspberry Pi board To build your sensor Pi 3B/3B+ or a higher model Pi WiFi adapter To capture WiFi packets Check your chipset that supports monitoring mode here Micro SD card and adapter To build and store the data At least 16 GB size Ethernet cable To connect the Pi with your laptop Portable power bank To run the sensor in outdoor environment +20000 mAh battery * It lasts one-day in our setting Pi camera To record the scene in the front of sensor Software Item Function Link PuTTY To access the Pi by your laptop here Raspberry Pi Imager To build Raspberry Pi OS here Raspberry Pi Imager To build Raspberry Pi OS here Skill Learning R and Python will be necessary for sensor building and data analysis. I recommend these classes: Data Science: Foundations using R Specialization and Python for Everybody Specialization "],["how-to-build-a-sensor.html", "Chapter 3 How to build a sensor 3.1 Getting started with Pi 3.2 Setting up the Pi to a sensor", " Chapter 3 How to build a sensor 3.1 Getting started with Pi Step 1: Install the OS of Pi on your SD card Plug in your SD card on your laptop and open the Raspberry OS imager and format your SD card. Write the Raspberry Pi OS on your SD card. Please enable ssh and set username (pi) and password (raspberry) in the setting before the writing. Step 2: Connect the Pi on your laptop This enables your laptop to access and control your Pi via a network cable. We dont need to buy and use a screen, keyboard and mouse that can be attached to the Pi. &lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD Plug in your SD card on the Pi and connect the Pi on your laptop via a Ethernet cable. Enable internet connection sharing option on your WiFI adapter. Find and remember the IP address of your Pi. 1) Press the window key button; 2) type in cmd, 3) type in arp -a, 4) search the IP address of Raspberry Pi by looking the first 6 characters of physical address MAC Address Lookup: MAC addresses of the all devices of Raspberry Pi Foundation start with B8:27:EB:xx:xx:xx or DC:A6:32:xx:xx:xx. Access your Pi by Putty by typing the IP address in the host name. Log in your Pi with the default setting (ID: pi, password: raspberry). Type ping 8.8.8.8 to see if your Pi can use the Internet. Step 3: Set up your Pi Update your Pi and packages: sudo apt-get update -y &amp;&amp; sudo apt-get upgrade -y Install packages we use: sudo apt-get install git python3-pip python3-dpkt python3-pcapy python3-schedule python3-picamera python3-dropbox libbluetooth-dev -y Set up the wireless setting on your phone hot spot sudo nano /etc/wpa_supplicant/wpa_supplicant.conf Put your mobile hot spot information (to me, juhyeon9087 for both SSID and password) country=GB network={ ssid=&quot;juhyeon9087&quot; psk=&quot;juhyeon9087&quot; key_mgmt=WPA-PSK } Set up camera by turning on interface Options - Legacy Camera sudo raspi-config Set up Dropbox on your Pi. Get your Dropbox access key first Create a app in the developer site of Dropbox here Select access more scopes: Move into Permissions and check more access Clone this script to the Raspberry Pi git clone https://github.com/andreafabrizi/Dropbox-Uploader.git Move into the cloned folder: cd Dropbox-Uploader Give the dropbox_uploader.sh script: sudo chmod +x dropbox_uploader.sh Run the dropbox_uploader.sh script: ./dropbox_uploader.sh Copy and paste your app key and app secret Cope and paste of the terminal URL to your search engine and put your access code 3.2 Setting up the Pi to a sensor Step 1: Test and play your your Pi Detecting WiFi packets Plug in a WiFi adapter on your Pi and type this: pi@raspberrypi:~ $ iwconfig lo no wireless extensions. eth0 no wireless extensions. wlan0 IEEE 802.11 ESSID:off/any Mode:Managed Access Point: Not-Associated Retry short limit:7 RTS thr:off Fragment thr:off Power Management:on wlan1 IEEE 802.11 ESSID:off/any Mode:Managed Access Point: Not-Associated Tx-Power=20 dBm Retry short long limit:2 RTS thr:off Fragment thr:off Power Management:off You will see wlan1, which you couldnt see before plugging in. wlan0 is the onboard WiFi. Install the aircrack-ng tool sudo apt-get install -y aircrack-ng Put the wlan1 in monitoring mode sudo airmon-ng start wlan1 With the monitoring mode adapter, execute this to scan for nearby WiFi devices sudo airodump-ng wlan1mon Sensor component Sending a file on your dropbox Move on the Dropbox-Uploader folder (cd .. is going back to home folder) cd Dropbox-Uploader Get the list of Dropbox file list root@raspberrypi:/home/pi/Dropbox-Uploader# ./dropbox_uploader.sh list &gt; Listing &quot;/&quot;... DONE [D] External Drive.dbx-external-drive Upload one file on your Dropbox root@raspberrypi:/home/pi/Dropbox-Uploader# ./dropbox_uploader.sh upload README.md / &gt; Uploading &quot;/home/pi/Dropbox-Uploader/README.md&quot; to &quot;/README.md&quot;... DONE Recheck the uploaded file on your Dropbox root@raspberrypi:/home/pi/Dropbox-Uploader# ./dropbox_uploader.sh list &gt; Listing &quot;/&quot;... DONE [D] External Drive.dbx-external-drive [F] 9373 README.md Detecting Bluetooth packets Clone a simple Bluetooth packet collector git clone https://github.com/MS3FGX/Bluelog.git Move on the folder cd Bluelog make and run the code by typing ./bluelog -vmfn Take a shot by Pi camera Check the attached camera vcgencmd get_camera supported=1 detected=1 Enter the command: raspistill -o test.jpg Step 2: Make our Pi as a sensor Download Filezlia and the code here Access your Pi by the Filezlia; 1) file - Site Manager, 2) New site, 3) Protoal as SSH transfer, 4) Host as your Pi IP, 5) User and Password (pi and raspberry as a default) Copy and paste the Python file start.py on the Pi. Test the python file python start.py Make the setting to execute the file after booting autumatically. In root setting (sudo su), copy and paste this: echo &quot;[Unit] Description=Wifi monitoring service After=network.target [Service] WorkingDirectory=/home/pi/ ExecStart=/usr/bin/python /home/pi/start.py User=root Group=root [Install] WantedBy=multi-user.target&quot; &gt; /lib/systemd/system/wifi_monitor.service cc chmod 644 /lib/systemd/system/wifi_monitor.service systemctl daemon-reload systemctl enable wifi_monitor.service Type this if you want to start the setting: systemctl start wifi_monitor Type this if you want to stop the setting: systemctl stop wifi_monitor Type this if you want to restart the setting: systemctl restart wifi_monitor Step 3: Understand our sensor procedure Time (seconds) Function What should you do 0 Before booting Unplug all Turn on your hot spot 0 ~ 2 Boot After 2~3 seconds plug your WiFi adapter 2 ~ 5 Syncronize the time with network time You can see Blue light of the adapter You can see RaspberryPi in the hotspot 5 ~ 20 Camera shot See Dropbox 20 ~ 30 monitoring mode Blue light off 30 ~ Start ======= Plug in your SD card on the Pi and connect the Pi on your laptop via a Ethernet cable. Enable internet connection sharing option on your WiFI adapter. Find and remember the IP address of your Pi. 1) Press the window key button; 2) type in cmd, 3) type in arp -a, 4) search the IP address of Raspberry Pi by looking the first 6 characters of physical address MAC Address Lookup: MAC addresses of the all devices of Raspberry Pi Foundation start with B8:27:EB:xx:xx:xx or DC:A6:32:xx:xx:xx. Access your Pi by Putty by typing the IP address in the host name. Log in your Pi with the default setting (ID: pi, password: raspberry). Type ping 8.8.8.8 to see if your Pi can use the Internet. Step 3: Set up your Pi Update your Pi and packages: sudo apt-get update -y &amp;&amp; sudo apt-get upgrade -y Install packages we use: sudo apt-get install git python3-pip python3-dpkt python3-pcapy python3-schedule python3-picamera python3-dropbox libbluetooth-dev -y Set up the wireless setting on your phone hot spot sudo nano /etc/wpa_supplicant/wpa_supplicant.conf Put your mobile hot spot information (to me, juhyeon9087 for both SSID and password) country=GB network={ ssid=&quot;juhyeon9087&quot; psk=&quot;juhyeon9087&quot; key_mgmt=WPA-PSK } Set up camera by turning on interface Options - Legacy Camera sudo raspi-config Set up Dropbox on your Pi. Get your Dropbox access key first Create a app in the developer site of Dropbox here Select access more scopes: Move into Permissions and check more access Clone this script to the Raspberry Pi git clone https://github.com/andreafabrizi/Dropbox-Uploader.git Move into the cloned folder: cd Dropbox-Uploader Give the dropbox_uploader.sh script: sudo chmod +x dropbox_uploader.sh Run the dropbox_uploader.sh script: ./dropbox_uploader.sh Copy and paste your app key and app secret Cope and paste of the terminal URL to your search engine and put your access code Step 4: Test and play your your Pi Detecting WiFi packets Plug in a WiFi adapter on your Pi and type this: pi@raspberrypi:~ $ iwconfig lo no wireless extensions. eth0 no wireless extensions. wlan0 IEEE 802.11 ESSID:off/any Mode:Managed Access Point: Not-Associated Retry short limit:7 RTS thr:off Fragment thr:off Power Management:on wlan1 IEEE 802.11 ESSID:off/any Mode:Managed Access Point: Not-Associated Tx-Power=20 dBm Retry short long limit:2 RTS thr:off Fragment thr:off Power Management:off You will see wlan1, which you couldnt see before plugging in. wlan0 is the onboard WiFi. Install the aircrack-ng tool sudo apt-get install -y aircrack-ng Put the wlan1 in monitoring mode sudo airmon-ng start wlan1 With the monitoring mode adapter, execute this to scan for nearby WiFi devices sudo airodump-ng wlan1mon Sensor component Sending a file on your dropbox Move on the Dropbox-Uploader folder (cd .. is going back to home folder) cd Dropbox-Uploader Get the list of Dropbox file list root@raspberrypi:/home/pi/Dropbox-Uploader# ./dropbox_uploader.sh list &gt; Listing &quot;/&quot;... DONE [D] External Drive.dbx-external-drive Upload one file on your Dropbox root@raspberrypi:/home/pi/Dropbox-Uploader# ./dropbox_uploader.sh upload README.md / &gt; Uploading &quot;/home/pi/Dropbox-Uploader/README.md&quot; to &quot;/README.md&quot;... DONE Recheck the uploaded file on your Dropbox root@raspberrypi:/home/pi/Dropbox-Uploader# ./dropbox_uploader.sh list &gt; Listing &quot;/&quot;... DONE [D] External Drive.dbx-external-drive [F] 9373 README.md Detecting Bluetooth packets Clone a simple Bluetooth packet collector git clone https://github.com/MS3FGX/Bluelog.git Move on the folder cd Bluelog make and run the code by typing ./bluelog -vmfn Take a shot by Pi camera Check the attached camera vcgencmd get_camera supported=1 detected=1 Enter the command: raspistill -o test.jpg Step 5: Make our Pi as a sensor Download Filezlia and the code here Move the "],["wifi-data-preprocessing.html", "Chapter 4 WiFi Data Preprocessing 4.1 Reading data 4.2 Preprocessing data", " Chapter 4 WiFi Data Preprocessing This is to understand the raw WiFi data collected and how to filter the raw data. 4.1 Reading data Step 1: Bring your data from Pi Download DB Browser for SQLlite. Bring your data via FileZlia When you plug your sensor, sudo systemctl stop wifi_monitor I recommend to stop the automatical setting. Open the data using the DB Browser for SQLlite Step 2: Read the data in R Bring your data here If you dont have the data, use this db_raw_1a &lt;- setDT( dbGetQuery(dbConnect(SQLite(), dbname = &quot;./static/file/wifi-1/wifi_2020-07-13HMS09_18_32.sqlite3&quot;), &quot;SELECT timestamp, type, subtype, strength, source_address, destination_address, access_point_name, access_point_address, sequence_number, channel, info FROM packets&quot;) %&gt;% collect()) head(db_raw_1a, 3) ## timestamp type subtype strength ## 1: 2020-07-13T09:18:33.306726 management probe-request -81 ## 2: 2020-07-13T09:18:33.319097 management probe-request -81 ## 3: 2020-07-13T09:18:35.056632 management probe-request -15 ## source_address destination_address access_point_name ## 1: 5c:c5:d4:0a:34:d0 ff:ff:ff:ff:ff:ff ## 2: 5c:c5:d4:0a:34:d0 ff:ff:ff:ff:ff:ff SK_WiFi908A_5G ## 3: d0:7f:a0:40:be:6b ff:ff:ff:ff:ff:ff ## access_point_address sequence_number channel ## 1: ff:ff:ff:ff:ff:ff 3370 6 ## 2: ff:ff:ff:ff:ff:ff 3371 6 ## 3: ff:ff:ff:ff:ff:ff 2598 1 ## info ## 1: 000012002e48000000028509a000af01000040100000ffffffffffff5cc5d40a34d0ffffffffffffa0d20000010802040b160c1218242d1a6e0917ffff00000000000000000000000000000000000000000032043048606c7f080200008001400000bf0c22718003faff0000faff0000 ## 2: 000012002e48000000028509a000af01000040100000ffffffffffff5cc5d40a34d0ffffffffffffb0d2000e534b5f57694669393038415f3547010802040b160c1218242d1a6e0917ffff00000000000000000000000000000000000000000032043048606c7f080200008001400000bf0c22718003faff0000faff0000 ## 3: 000012002e48000000026c09a000f101000040000000ffffffffffffd07fa040be6bffffffffffff60a20000010402040b1632080c1218243048606c0301012d1a21001fff000000000000000000800100000000000000000000007f050000008001dd09001018020010000000 Data Description Field name Description timestamp The time at which the packet detected at sensor Type/subtype Type of packet Strength The strength of the received signal at sensor Source address The MAC address of the device that creates the original message Destination address The MAC address of the device that eventually receives the message Access point address The MAC address of the device that involves delivering Sequence number - Channel Adapter set be to monitor Info raw The info column, is segmented to each field by hex (raw) via binascii.hexlify. Here 4.2 Preprocessing data Step 1: Removal of random MAC addresses You can assess the random MAC address here How much Random MAC addresses are included? RANDOMIZED_SECOND_ORDER &lt;- c(&quot;2&quot;, &quot;6&quot;, &quot;a&quot;, &quot;e&quot;) Step 2: Removal of non-mobile devices Join the MAC Vendor for first 12-chracter of MAC address Extract Samsung|Apple|Xiaomi|LG|Huawei|Microsoft|Sony|OnePlus|Google MAC_VENDOR &lt;- fread(&quot;https://macaddress.io/database/macaddress.io-db.csv&quot;) %&gt;% select(oui, companyName) %&gt;% mutate(MAC_FIRST6 = str_sub(tolower(oui), 1, 8)) %&gt;% select(-oui) %&gt;% as.data.table() Step 3: Removal of rarely detected devices Calculate the duration of device in your dataset Filter out the short duration "],["wifi-data-analysis.html", "Chapter 5 WiFi Data Analysis 5.1 Count 5.2 Location 5.3 Track 5.4 Identify 5.5 Activities", " Chapter 5 WiFi Data Analysis Using WiFi sensing technologies we identify five main metrics on pedestrian behaviors. Here is the figure illustrating the metrics. Count  How many people are present? Location  Where is that person? Track  Where was the person before? Identity  Who is the person? Activities  What is the person doing? The following sections cover how to generate the metrics. WiFi GPS 5.1 Count Q: How many people (device) in your data-gathering experiment? Make the plot of unique number of device by time. 5.2 Location 5.3 Track 5.4 Identify 5.5 Activities Q: Who are people staying? "]]
